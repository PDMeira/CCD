#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18052
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Data
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="ccddedup")]
	public partial class ccddedupDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Insertaudit(audit instance);
    partial void Updateaudit(audit instance);
    partial void Deleteaudit(audit instance);
    partial void Insertaudit_ccd(audit_ccd instance);
    partial void Updateaudit_ccd(audit_ccd instance);
    partial void Deleteaudit_ccd(audit_ccd instance);
    partial void Insertaudit_discard(audit_discard instance);
    partial void Updateaudit_discard(audit_discard instance);
    partial void Deleteaudit_discard(audit_discard instance);
    #endregion
		
		public ccddedupDataContext() : 
				base(global::Data.Properties.Settings.Default.ccddedupConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public ccddedupDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ccddedupDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ccddedupDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ccddedupDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<audit> audits
		{
			get
			{
				return this.GetTable<audit>();
			}
		}
		
		public System.Data.Linq.Table<audit_ccd> audit_ccds
		{
			get
			{
				return this.GetTable<audit_ccd>();
			}
		}
		
		public System.Data.Linq.Table<audit_discard> audit_discards
		{
			get
			{
				return this.GetTable<audit_discard>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.audit")]
	public partial class audit : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _AuditId;
		
		private System.Nullable<System.Guid> _MergeId;
		
		private System.Nullable<System.DateTime> _DateStamp;
		
		private string _MergeRule;
		
		private System.Nullable<int> _RuleVersion;
		
		private System.Xml.Linq.XElement _PreRuleMasterCcd;
		
		private System.Xml.Linq.XElement _PostRuleMasterCcd;
		
		private System.Nullable<double> _RunSeconds;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAuditIdChanging(System.Guid value);
    partial void OnAuditIdChanged();
    partial void OnMergeIdChanging(System.Nullable<System.Guid> value);
    partial void OnMergeIdChanged();
    partial void OnDateStampChanging(System.Nullable<System.DateTime> value);
    partial void OnDateStampChanged();
    partial void OnMergeRuleChanging(string value);
    partial void OnMergeRuleChanged();
    partial void OnRuleVersionChanging(System.Nullable<int> value);
    partial void OnRuleVersionChanged();
    partial void OnPreRuleMasterCcdChanging(System.Xml.Linq.XElement value);
    partial void OnPreRuleMasterCcdChanged();
    partial void OnPostRuleMasterCcdChanging(System.Xml.Linq.XElement value);
    partial void OnPostRuleMasterCcdChanged();
    partial void OnRunSecondsChanging(System.Nullable<double> value);
    partial void OnRunSecondsChanged();
    #endregion
		
		public audit()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AuditId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid AuditId
		{
			get
			{
				return this._AuditId;
			}
			set
			{
				if ((this._AuditId != value))
				{
					this.OnAuditIdChanging(value);
					this.SendPropertyChanging();
					this._AuditId = value;
					this.SendPropertyChanged("AuditId");
					this.OnAuditIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MergeId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> MergeId
		{
			get
			{
				return this._MergeId;
			}
			set
			{
				if ((this._MergeId != value))
				{
					this.OnMergeIdChanging(value);
					this.SendPropertyChanging();
					this._MergeId = value;
					this.SendPropertyChanged("MergeId");
					this.OnMergeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateStamp", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateStamp
		{
			get
			{
				return this._DateStamp;
			}
			set
			{
				if ((this._DateStamp != value))
				{
					this.OnDateStampChanging(value);
					this.SendPropertyChanging();
					this._DateStamp = value;
					this.SendPropertyChanged("DateStamp");
					this.OnDateStampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MergeRule", DbType="NVarChar(50)")]
		public string MergeRule
		{
			get
			{
				return this._MergeRule;
			}
			set
			{
				if ((this._MergeRule != value))
				{
					this.OnMergeRuleChanging(value);
					this.SendPropertyChanging();
					this._MergeRule = value;
					this.SendPropertyChanged("MergeRule");
					this.OnMergeRuleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RuleVersion", DbType="Int")]
		public System.Nullable<int> RuleVersion
		{
			get
			{
				return this._RuleVersion;
			}
			set
			{
				if ((this._RuleVersion != value))
				{
					this.OnRuleVersionChanging(value);
					this.SendPropertyChanging();
					this._RuleVersion = value;
					this.SendPropertyChanged("RuleVersion");
					this.OnRuleVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PreRuleMasterCcd", DbType="Xml", UpdateCheck=UpdateCheck.Never)]
		public System.Xml.Linq.XElement PreRuleMasterCcd
		{
			get
			{
				return this._PreRuleMasterCcd;
			}
			set
			{
				if ((this._PreRuleMasterCcd != value))
				{
					this.OnPreRuleMasterCcdChanging(value);
					this.SendPropertyChanging();
					this._PreRuleMasterCcd = value;
					this.SendPropertyChanged("PreRuleMasterCcd");
					this.OnPreRuleMasterCcdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PostRuleMasterCcd", DbType="Xml", UpdateCheck=UpdateCheck.Never)]
		public System.Xml.Linq.XElement PostRuleMasterCcd
		{
			get
			{
				return this._PostRuleMasterCcd;
			}
			set
			{
				if ((this._PostRuleMasterCcd != value))
				{
					this.OnPostRuleMasterCcdChanging(value);
					this.SendPropertyChanging();
					this._PostRuleMasterCcd = value;
					this.SendPropertyChanged("PostRuleMasterCcd");
					this.OnPostRuleMasterCcdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RunSeconds", DbType="Float")]
		public System.Nullable<double> RunSeconds
		{
			get
			{
				return this._RunSeconds;
			}
			set
			{
				if ((this._RunSeconds != value))
				{
					this.OnRunSecondsChanging(value);
					this.SendPropertyChanging();
					this._RunSeconds = value;
					this.SendPropertyChanged("RunSeconds");
					this.OnRunSecondsChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.audit_ccd")]
	public partial class audit_ccd : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _auditId;
		
		private int _CcdId;
		
		private System.Xml.Linq.XElement _CcdData;
		
		private System.Nullable<int> _PrePost;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnauditIdChanging(System.Guid value);
    partial void OnauditIdChanged();
    partial void OnCcdIdChanging(int value);
    partial void OnCcdIdChanged();
    partial void OnCcdDataChanging(System.Xml.Linq.XElement value);
    partial void OnCcdDataChanged();
    partial void OnPrePostChanging(System.Nullable<int> value);
    partial void OnPrePostChanged();
    #endregion
		
		public audit_ccd()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_auditId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid auditId
		{
			get
			{
				return this._auditId;
			}
			set
			{
				if ((this._auditId != value))
				{
					this.OnauditIdChanging(value);
					this.SendPropertyChanging();
					this._auditId = value;
					this.SendPropertyChanged("auditId");
					this.OnauditIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CcdId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CcdId
		{
			get
			{
				return this._CcdId;
			}
			set
			{
				if ((this._CcdId != value))
				{
					this.OnCcdIdChanging(value);
					this.SendPropertyChanging();
					this._CcdId = value;
					this.SendPropertyChanged("CcdId");
					this.OnCcdIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CcdData", DbType="Xml", UpdateCheck=UpdateCheck.Never)]
		public System.Xml.Linq.XElement CcdData
		{
			get
			{
				return this._CcdData;
			}
			set
			{
				if ((this._CcdData != value))
				{
					this.OnCcdDataChanging(value);
					this.SendPropertyChanging();
					this._CcdData = value;
					this.SendPropertyChanged("CcdData");
					this.OnCcdDataChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrePost", DbType="Int")]
		public System.Nullable<int> PrePost
		{
			get
			{
				return this._PrePost;
			}
			set
			{
				if ((this._PrePost != value))
				{
					this.OnPrePostChanging(value);
					this.SendPropertyChanging();
					this._PrePost = value;
					this.SendPropertyChanged("PrePost");
					this.OnPrePostChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.audit_discard")]
	public partial class audit_discard : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _AuditId;
		
		private int _DiscardId;
		
		private System.Xml.Linq.XElement _DiscardData;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAuditIdChanging(System.Guid value);
    partial void OnAuditIdChanged();
    partial void OnDiscardIdChanging(int value);
    partial void OnDiscardIdChanged();
    partial void OnDiscardDataChanging(System.Xml.Linq.XElement value);
    partial void OnDiscardDataChanged();
    #endregion
		
		public audit_discard()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AuditId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid AuditId
		{
			get
			{
				return this._AuditId;
			}
			set
			{
				if ((this._AuditId != value))
				{
					this.OnAuditIdChanging(value);
					this.SendPropertyChanging();
					this._AuditId = value;
					this.SendPropertyChanged("AuditId");
					this.OnAuditIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DiscardId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DiscardId
		{
			get
			{
				return this._DiscardId;
			}
			set
			{
				if ((this._DiscardId != value))
				{
					this.OnDiscardIdChanging(value);
					this.SendPropertyChanging();
					this._DiscardId = value;
					this.SendPropertyChanged("DiscardId");
					this.OnDiscardIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DiscardData", DbType="Xml", UpdateCheck=UpdateCheck.Never)]
		public System.Xml.Linq.XElement DiscardData
		{
			get
			{
				return this._DiscardData;
			}
			set
			{
				if ((this._DiscardData != value))
				{
					this.OnDiscardDataChanging(value);
					this.SendPropertyChanging();
					this._DiscardData = value;
					this.SendPropertyChanged("DiscardData");
					this.OnDiscardDataChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
